-- day02

/*
    참고 ]
        오라클이 데이터를 보관하는 방법
            테이블(Entity, 개체)단위로 데이터를 보관한다.
            참고 ]
                ERD - Entity Relation Diagram
                      테이블 간의 관계를 도식화 한 다이어그램
                      
            참고 ]
                오라클은 테블들간의 관계를 형성해서 데이터를 저장한다.
                이런 종류의 데이터베이스 관리시스템을
                    RDBMS - 개체들의 관계를 형성해서 데이터를 관리하는 시스템...
                            관계형 데이터베이스 관리시스템
                            
                            
        테이블이란 필드와 레코드(ROW, 행)로 구성된 데이터를 보관하는 가장 작은 단위
        
        필드      : 같은 개념의 데이터 모임(컬럼, 열, 칸, ... )
        레코드    : 같은 목적을 가진 데이터 모임(행, 로우,...)
        
        참고로
            필드에는 그 항목을 구분하기 위한 이름이 부여되어 있다.
            이것을 우리는 필드이름 이라고 부른다.
            하지만 레코드는 각 행을 구분하는 방법이 존재하지 않는다.
        
    참고 ]
        우리가 오라클에 접속하게되면
        오라클이 접속자에게 메모리를 할당해준다.
        이때 이 메모리가 할당된 상태를
            "세션이 하나 열렸다."
        라고 표현한다.
        오라클에서는 접속을 세션으로 표현한다.
        오라클에서는 같은 계정으로 여러 컴퓨터에서 동시에 접속할 수 있다.
        이때 확보된 메모리 공간은 서로 공유가 안된다.
        
        따라서 접속한 사람은 확보한 공간에서만 작업(DML 명령)을 하게되고
        최종적으로 데이터베이스에 적용시키는 작업은 별도로 명령을 해야한다.(TCL명령) 
*/

-- 내가 접속한 계정안에 테이블이름들을 조회해보자.
SELECT 
    tname
FROM
    tab
;

-- 참고 ] 오라클은 명령과 테이블이름, 필드이름 을 구분하는데 대소문자를 구분하지 않는다.
--      주의 ] 데이터는 대소문자를 구분해야 한다.

-----------------------------------------------------------------------------------------------------
/*
    조회된 데이터중 중복된 데이터를 한번만 조회되도록 하는 방법
    ==> 같은 데이터는 한번만 출력되도록 하는 방법
    
    주의사항 ]
        이 명령은 질의명령에서 한번만 사용해야하고
        조회된 데이터의 각 행들이 같은 경우에만 적용된다.
        ==> 각필드의 데이터들 마저 동일해야 중복된 데이터로 간주한다.
    
        형식 ]
            SELECT
                DISTINCT 컬럼이름
            FROM
                테이블이름
            ;
*/

-- 사원들의 직급을 조회하세요. 단, 중복된 직급은 한번만 출력되도록 하세요.
SELECT
    DISTINCT job
FROM
    emp
;

-- 사원들의 직급, 부서번호를 조회하는데 중복된데이터는 한번만 출력되도록 하세요.
SELECT
    DISTINCT job, deptno
FROM
    emp
;

/*
    참고 ]
        원칙적으로 데이터를 조회할 때는
        조회할 필드의 이름을 정확하게 나열해서 조회하는 것이 원칙이다.
        간혹 모든 정보(모든 필드)를 보고 싶은 경우에 
        필드이름을 나열하는 대신 ' * ' 기호를 사용해서 대신하는 경우가 있다.
        하지만 실무에서는 절대로 사용하면 안되는 방법이다.
        참고 ]
            * : 자바에서와 마찬가지로 모두 의 의미
            
----------------------------------------------------------------------------------------------------
    질의 명령 안에 연산식을 포함할 수 있다.
    연산식이 포함되면 연산된 결과가 출력된다.
    이때 출력되는 필드의 이름은 연산식이 된다.
*/
-- 사원들의 이름, 급여, 10% 인상된 급여를 조회하세요.
SELECT
    ename as 사원이름, sal AS 원급여, sal * 1.1 "인상 급여" -- 공백이 포함된 별칭은 큰따옴표로 감싸야한다.
FROM
    emp
;

/*
    참고 ]
        DUAL 테이블
        ==> 우리가 조회하게되면 테이블의 저장된 데이터 중에서 
            필터링이 되서 그 결과를 가지고 보여주게 된다.
            그런데 데이터자체를 조회하게되면(SELECT 절에 데이터를 나열하면..)
            조회되는 데이터는 필터링된 데이터 갯수만큼 출력될 것이다.
            
            이때 계산식의 결과만 원하는 경우는 이렇게 조회하면 불편할 것이다.
            
            따라서 이런경우에 사용할 수 있도록 만들어서 제공하는 테이블이 있는데
            그 테이블이 dual 테이블이다.
            
            하지만 이 테이블은 물리적으로 저장되어있는 테이블은 아니다.
            오라클 시스템 자체가 제공해주는 가상의 테이블이다.
            이 테이블은 한개의 row 만 가지고 있는 테이블이다.
*/

SELECT
    '제니'
FROM
    emp
; -- ==> 이 질의명령은 각 데이터에서 '제니'를 조회해달라는 명령과 같은 의미이다.

SELECT
    '제니'
FROM
    dual
;

-- 현재시간을 조회해보세요.
SELECT sysdate FROM dual;
/*
    참고 ]
        시스템의 현재시간을 반환해주는 연산자
            sysdate
            
    참고 ]
        오라클에서는 자바와 마찬가지로 
        날짜와 시간은 분리해서 기억하지 않는다.
*/

/*
    오라클에서 사용하는 산술 연산자
        +, -, *, /
*/
SELECT 10 / 3 FROM dual; -- 오라클에서는 정수의 연산결과가 실수가 될 수 있다.

---------------------------------------------------------------------------------
/*
    NULL 데이터
    ==> 필드 안에는 데이터가 보관되어야하는데...
        없는 정보는 데이터가 없을 수 있다.
        이처럼 필드의 데이터가 없는 상태를 NULL 데이터라 한다.
    
    ***
    주의 ]
        NULL 데이터는 모든 연산에서 제외된다.
        ==> NULL 데이터로 연산하는 데이터는 조회에서 제외가 된다.
    
    ***
    참고 ]
        NVL 함수
            형식 ]
                NVL(필드이름(또는 필드계산식), 대신할데이터)
                
            의미 ]
                NULL 데이터를 강제로 특정 데이터로 바꾸어주는 명령
                따라서 특정 데이터로 변경하게되면 연산에 포함될 수 있다.
*/

-- 사원들의 상사번호에 10000을 추가해서  사원이름, 상사번호 를 조회하세요.
SELECT
    ename, mgr + 10000 상사번호
FROM
    emp
;

-- 사원들의 연봉을 계산해서 사원이름, 입사일, 연봉을 조회하세요. 
-- 연봉은 급여 * 12 + 커미션, 커미션이 없는 사원은 0으로 계산하세요.
SELECT
    ename 사원이름, hiredate 입사일, (sal * 12 + comm) 연봉
FROM
    emp
;

-- NULL 함수 사용
SELECT
    ename 사원이름, hiredate 입사일, (sal * 12 + NVL(comm, 0)) 연봉
FROM
    emp
;

SELECT
    ename 사원이름, hiredate 입사일, NVL(sal * 12 + comm, sal * 12) 연봉
FROM
    emp
;

--------------------------------------------------------------------------------
/*
    결합연산자 ==> 결합된 결과는 문자열로 만들어진다.
    ==> 오라클 역시 문자열을 결합하여 출력할 수 있다.
        이때는 두개의 필드를 결합할 수도 있고
        데이터를 결합할 수도 있다.
*/

SELECT 10 || 20 FROM dual; 

-- 사원번호와 사원이름을 조회하는데 형식은 사원번호 - 사원이름 의 형식으로 조회하세요.
SELECT
    empno || ' - ' || ename 사원
FROM
    emp
;

-- 사원번호, 사원이름을 조회하는데 
--      0000번, 홍길동 님
-- 의 형식으로 조회하세요.
SELECT
    empno || '번' 사원번호, empno, ename || ' 님' 사원이름
FROM
    emp
;

--------------------------------------------------------------------------------
/*
    조건조회
    
        형식 ]
            SELECT
                필드이름들...
            FROM
                테이블이름
            WHERE
                조건식
                
    참고 ]
        NULL 검색
        ==> NULL 데이터는 모든 연산에서 제외된다.
            따라서 비교연산자로 NULL 데이터를 비교할 수 없다.
            
            따라서  NULL 데이터의 비교는 
                IS NULL, IS NOT NULL
            을 사용해서 비교해야 한다.
            
*/
-- 커미션이 없는 사원들의 이름, 급여, 커미션을 조회하세요.
SELECT
    ename, sal, comm
FROM
    emp
WHERE
    comm = NULL
;

SELECT
    ename, sal, comm
FROM
    emp
WHERE
    comm IS NULL
;

/*
    하림씨만 하세요...
    sql scott/tiger@192.168.xxx.xxx:1521:xe
*/

-- 커미션이 있는 사원들의 사원번호, 사원이름, 급여, 커미션 을 조회하세요. 
-- 단, 커미션은 100 을 추가해서 조회하세요.
SELECT
    empno, ename, sal, comm ori_comm, comm + 100 comm
FROM
    emp
WHERE
    comm IS NOT NULL
--     NOT comm IS NULL 도 같은 의미
;

--------------------------------------------------------------------------------